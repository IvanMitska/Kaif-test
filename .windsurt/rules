{
  "name": "KAIF - Jungle Club & Spa Website",
  "description": "Modern React website for wellness complex in Phuket with restaurant, spa, sports facilities, and beauty salon",
  "rules": [
    {
      "description": "Use React framework for all UI components",
      "pattern": ".*\\.(jsx|tsx)$",
      "forbiddenPatterns": [
        "document\\.getElementById\\(",
        "document\\.querySelector\\(",
        "innerHTML"
      ],
      "requirements": [
        "Components should follow functional component pattern with hooks",
        "Use named exports for components",
        "Ensure proper prop-types are defined"
      ]
    },
    {
      "description": "Maintain consistent folder structure",
      "requirements": [
        "Components should be organized in the /components directory",
        "Pages should be in the /pages directory",
        "Hooks should be in the /hooks directory",
        "Context providers in /contexts",
        "API services in /services",
        "Assets in /assets",
        "Use index.js files for cleaner imports"
      ]
    },
    {
      "description": "Follow style guidelines",
      "pattern": ".*\\.(css|scss|styled\\.jsx?)$",
      "requirements": [
        "Use Tailwind CSS for styling",
        "Apply refined color palette with mint green/sage, white, and subtle accent colors",
        "Create an elegant, minimalist aesthetic",
        "Ensure responsive design across all components",
        "Use CSS variables for theme colors",
        "Follow mobile-first approach"
      ]
    },
    {
      "description": "Internationalization requirements",
      "requirements": [
        "Use i18next for all text content",
        "Support Russian, English, and Thai languages",
        "Store translations in separate locale files",
        "No hardcoded strings in components"
      ]
    },
    {
      "description": "Performance optimization",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Implement React.lazy() for code splitting",
        "Use useMemo and useCallback for optimization",
        "Implement windowing for long lists",
        "Use proper image optimization techniques",
        "Minimize re-renders with proper component structure"
      ]
    },
    {
      "description": "State management",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Use React Context for global state",
        "Keep component state local when possible",
        "Maintain unidirectional data flow",
        "Separate UI state from data state"
      ]
    },
    {
      "description": "Animation guidelines",
      "requirements": [
        "Use Framer Motion for page transitions",
        "Keep animations smooth and not excessive",
        "Ensure animations respect user's reduced motion preferences",
        "Maintain consistent animation durations"
      ]
    },
    {
      "description": "Accessibility requirements",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Use semantic HTML tags",
        "Ensure proper ARIA attributes",
        "Maintain keyboard navigation support",
        "Provide sufficient color contrast",
        "Ensure proper focus management"
      ]
    },
    {
      "description": "API and data handling",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Use custom hooks for data fetching",
        "Implement proper loading and error states",
        "Handle API errors gracefully",
        "Cache responses when appropriate"
      ]
    },
    {
      "description": "Form implementation requirements",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Use Formik for form management",
        "Implement Yup schemas for validation",
        "Show clear validation error messages",
        "Maintain form state on navigation"
      ]
    },
    {
      "description": "Booking system requirements",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Implement date selection with react-datepicker",
        "Ensure timezone awareness in booking features",
        "Provide clear confirmation after booking",
        "Allow for booking modification/cancellation"
      ]
    },
    {
      "description": "Restaurant menu implementation",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Implement menu as filterable card components",
        "Organize menu items by categories",
        "Display dietary information and allergens",
        "Allow sorting and filtering of menu items"
      ]
    },
    {
      "description": "Maps integration",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Use React Google Maps API",
        "Implement custom marker for KAIF location",
        "Provide directions functionality",
        "Ensure map is responsive"
      ]
    },
    {
      "description": "Image handling",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Implement lazy loading for images",
        "Use appropriate image formats (WebP with fallbacks)",
        "Provide proper alt text for accessibility",
        "Use responsive images with srcset"
      ]
    },
    {
      "description": "Language switcher implementation",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Persist language preference in localStorage",
        "Show language switcher in header",
        "Ensure smooth transition between languages",
        "Default to browser language on first visit"
      ]
    },
    {
      "description": "SEO requirements",
      "pattern": ".*\\.(jsx?|tsx?)$",
      "requirements": [
        "Implement React Helmet for meta tags",
        "Use proper heading hierarchy",
        "Implement schema.org markup",
        "Ensure crawlable routes"
      ]
    }
  ],
  "examples": [
    {
      "name": "Component Structure Example",
      "code": "import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nconst ServiceCard = ({ title, description, image, price }) => {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"rounded-lg overflow-hidden shadow-lg bg-white hover:shadow-xl transition-shadow duration-300\">\n      <img \n        src={image} \n        alt={title} \n        className=\"w-full h-48 object-cover\"\n        loading=\"lazy\"\n      />\n      <div className=\"p-4\">\n        <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{title}</h3>\n        <p className=\"text-gray-700 mb-4\">{description}</p>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-[#EF6C4C] font-semibold\">{price}</span>\n          <button \n            className=\"bg-[#41B2D7] text-white px-4 py-2 rounded hover:bg-[#63AA2E] transition-colors duration-300\"\n          >\n            {t('common.bookNow')}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nServiceCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n};\n\nexport default ServiceCard;"
    },
    {
      "name": "i18n Configuration Example",
      "code": "import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport enTranslation from './locales/en/translation.json';\nimport ruTranslation from './locales/ru/translation.json';\nimport thTranslation from './locales/th/translation.json';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: {\n        translation: enTranslation,\n      },\n      ru: {\n        translation: ruTranslation,\n      },\n      th: {\n        translation: thTranslation,\n      },\n    },\n    fallbackLng: 'en',\n    supportedLngs: ['en', 'ru', 'th'],\n    interpolation: {\n      escapeValue: false,\n    },\n    detection: {\n      order: ['localStorage', 'navigator'],\n      caches: ['localStorage'],\n    },\n  });\n\nexport default i18n;"
    },
    {
      "name": "Google Maps Integration Example",
      "code": "import React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { useTranslation } from 'react-i18next';\n\nconst MapComponent = () => {\n  const { t } = useTranslation();\n  \n  const mapStyles = {\n    height: '400px',\n    width: '100%',\n  };\n  \n  const defaultCenter = {\n    lat: 7.909534, \n    lng: 98.337349,\n  };\n  \n  return (\n    <div className=\"mb-12\">\n      <h2 className=\"text-2xl font-bold mb-4\">{t('contact.findUs')}</h2>\n      <LoadScript googleMapsApiKey=\"YOUR_API_KEY\">\n        <GoogleMap\n          mapContainerStyle={mapStyles}\n          zoom={15}\n          center={defaultCenter}\n        >\n          <Marker position={defaultCenter} />\n        </GoogleMap>\n      </LoadScript>\n      <div className=\"mt-4 bg-gray-100 p-4 rounded\">\n        <p className=\"font-medium\">{t('contact.address')}</p>\n        <p>73, Baan Chalekiri Village, 6 Pra Phuket Keaw Road, Kathu</p>\n        <p className=\"mt-2\">\n          <span className=\"font-medium\">{t('contact.phone')}</span>: +66 62 480 5877\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default MapComponent;"
    }
  ]
}